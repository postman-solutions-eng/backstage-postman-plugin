{"version":3,"file":"index.cjs.js","sources":["../src/service/postman/PostmanService.ts","../src/service/router.ts"],"sourcesContent":["import axios from 'axios';\n\nexport class PostmanService {\n\n    private options: any = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    constructor(private baseUrl: string, private apiKey: string) {\n        this.options.headers['X-Api-Key'] = this.apiKey;\n    }\n\n    // Function to make a GET request to the Postman API\n    async getPostmanAPIData(id: string) {\n        try {\n            const { data } = await axios.get(`${this.baseUrl}/apis/${id}?include=schemas,collections,versions,gitInfos`, { ...this.options, headers: { ...this.options.headers, 'Accept': 'application/vnd.api.v10+json' } });\n            return data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    // Function to make a GET request to fetch the API versions from the Postman API\n    async getPostmanAPIVersions(id: string) {\n        try {\n            const response = await axios.get(`${this.baseUrl}/apis/${id}/versions`, { ...this.options, headers: { ...this.options.headers, 'Accept': 'application/vnd.api.v10+json' } });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    // Function to make a GET request to fetch an API version from the Postman API\n    async getPostmanAPIVersion(id: string, versionId: string) {\n        try {\n            const response = await axios.get(`${this.baseUrl}/apis/${id}/versions/${versionId}`, { ...this.options, headers: { ...this.options.headers, 'Accept': 'application/vnd.api.v10+json' } });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    // Function to make a GET request to fetch the API monitor data from the Postman API\n    async getAllPostmanMonitorsData(workspaceId: string) {\n        try {\n            const response = await axios.get(`${this.baseUrl}/monitors${workspaceId ? `?workspace=${workspaceId}` : ''}`, this.options);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    // Function to make a GET request to fetch the collections for a given API from the Postman API based on collection id\n    async getPostmanCollection(id: string) {\n        try {\n            const response = await axios.get(`${this.baseUrl}/collections/${id}`, this.options);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    // Function to make a GET request to fetch collections by tags from the Postman API\n    async getPostmanCollectionsByTag(tag: string) {\n        try {\n            const response = await axios.get(`${this.baseUrl}/tags/${tag}/entities`, this.options);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    // Function to make a GET request to fetch the API monitor data from the Postman API\n    async getPostmanAPIMonitorData(id: string) {\n        try {\n            const response = await axios.get(`${this.baseUrl}/monitors/${id}`, this.options);\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    };\n\n}","// Backstage Components\nimport { errorHandler } from '@backstage/backend-common';\n\n// External Components\nimport express from 'express';\nimport { Logger } from 'winston';\nimport Router from 'express-promise-router';\nimport { Request, Response } from 'express';\n\n// Config\nimport { Config } from '@backstage/config';\n\n// Postman Service\nimport { PostmanService } from './postman/PostmanService';\n\nexport interface RouterOptions {\n\tlogger: Logger;\n\tconfig: Config;\n}\n\nexport async function createRouter( options: RouterOptions ): Promise<express.Router> {\n\tconst { logger, config } = options;\n\n\tconst router = Router();\n\trouter.use(express.json());\n\n\tconst checkForAPIKey = (req: express.Request, res: express.Response, next: express.NextFunction) => {\n\t\tif (res.statusCode === 401) {\n\t\t\tres.status(401).json({ error: 'No API key provided' });\n\t\t} else {\n\t\t\tnext();\n\t\t}\n\t};\n\n\tconst baseUrl = config?.getString('postman.baseUrl') ?? '';\n\tconst apiKey = config?.getString('postman.apiKey') ?? '';\n\n\tconst postmanService = new PostmanService(baseUrl, apiKey);\n\n\t/*\n\tPostman API Builder Routes\n\t*/\n\n\t// Get API by ID\n\trouter.get('/apis/:id', checkForAPIKey, async (req: Request, res: Response) => {\n\t\ttry {\n\t\t\tconst data = await postmanService.getPostmanAPIData(req.params.id);\n\t\t\tres.json(data);\n\t\t} catch (error: any) {\n\t\t\tlogger.error(error);\n\t\t\tres.status(res.statusCode).json({ error: error.message });\n\t\t}\n\t});\n\n\t// Get API versions\n\trouter.get('/apis/:id/versions', checkForAPIKey, async (req: Request, res: Response) => {\n\t\ttry {\n\t\t\tconst data = await postmanService.getPostmanAPIVersions(req.params.id);\n\t\t\tres.json(data);\n\t\t} catch (error: any) {\n\t\t\tlogger.error(error);\n\t\t\tres.status(res.statusCode).json({ error: error.message });\n\t\t}\n\t});\n\n\t// Get API version by ID\n\trouter.get('/apis/:id/versions/:versionId', checkForAPIKey, async (req: Request, res: Response) => {\n\t\ttry {\n\t\t\tconst data = await postmanService.getPostmanAPIVersion(req.params.id, req.params.versionId);\n\t\t\tres.json(data);\n\t\t} catch (error: any) {\n\t\t\tlogger.error(error);\n\t\t\tres.status(res.statusCode).json({ error: error.message });\n\t\t}\n\t});\n\n\t/*\n\tMonitor Routes\n\t*/\n\n\t// Get all monitors\n\trouter.get('/monitors', checkForAPIKey, async (req: Request, res: Response) => {\n\t\ttry {\n\t\t\tconst data = await postmanService.getAllPostmanMonitorsData(req.query.workspace ? req.query.workspace.toString() : '');\n\t\t\tres.json(data);\n\t\t} catch (error: any) {\n\t\t\tlogger.error(error);\n\t\t\tres.status(res.statusCode).json({ error: error.message });\n\t\t}\n\t});\n\n\t// Get monitor by ID\n\trouter.get('/monitors/:id', checkForAPIKey, async (req: Request, res: Response) => {\n\t\ttry {\n\t\t\tconst data = await postmanService.getPostmanAPIMonitorData(req.params.id);\n\t\t\tres.json(data);\n\t\t} catch (error: any) {\n\t\t\tlogger.error(error);\n\t\t\tres.status(res.statusCode).json({ error: error.message });\n\t\t}\n\t});\n\n\t// Get all monitors by workspace ID\n\trouter.get('/monitors/:workspaceId', checkForAPIKey, async (req: Request, res: Response) => {\n\t\ttry {\n\t\t\tconst data = await postmanService.getAllPostmanMonitorsData(req.params.workspaceId);\n\t\t\tres.json(data);\n\t\t} catch (error: any) {\n\t\t\tlogger.error(error);\n\t\t\tres.status(res.statusCode).json({ error: error.message });\n\t\t}\n\t});\n\n\t/*\n\tCollection Routes\n\t*/\n\n\t// Get collection by ID\n\trouter.get('/collections/:id', checkForAPIKey, async (req: Request, res: Response) => {\n\t\ttry {\n\t\t\tconst data = await postmanService.getPostmanCollection(req.params.id);\n\t\t\tres.json(data);\n\t\t} catch (error: any) {\n\t\t\tlogger.error(error);\n\t\t\tres.status(res.statusCode).json({ error: error.message });\n\t\t}\n\t});\n\n\t// Get collections by tag\n\trouter.get('/tags/:tag/entities', checkForAPIKey, async (req: Request, res: Response) => {\n\t\ttry {\n\t\t\tconst data = await postmanService.getPostmanCollectionsByTag(req.params.tag);\n\t\t\tres.json(data);\n\t\t} catch (error: any) {\n\t\t\tlogger.error(error);\n\t\t\tres.status(res.statusCode).json({ error: error });\n\t\t}\n\t});\n\n\trouter.use(errorHandler());\n\treturn router;\n}\n"],"names":["axios","Router","express","errorHandler"],"mappings":"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"}